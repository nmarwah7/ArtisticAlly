{"ast":null,"code":"var _jsxFileName = \"/Users/nikitamarwah/Orbital24/artistically/client/src/components/Messages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Messages.css'; // Import CSS file for styling\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Messages = ({\n  userId,\n  contacts,\n  selectedContact,\n  setSelectedContact\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [existingChats, setExistingChats] = useState(new Set());\n  const [allUsers, setAllUsers] = useState([]);\n  useEffect(() => {\n    // Fetch existing chats for all contacts on component mount\n    fetchAllChats();\n    // Fetch all users for search functionality\n    fetchAllUsers();\n  }, []);\n  useEffect(() => {\n    if (selectedContact) {\n      fetchMessages(selectedContact.id);\n    }\n  }, [selectedContact]);\n  const fetchAllChats = async () => {\n    try {\n      const chatPromises = contacts.map(contact => axios.get(`http://localhost:3001/messages/${userId}/${contact.id}`));\n      const responses = await Promise.all(chatPromises);\n      const chatIds = responses.filter(response => response.data.length > 0).map((response, index) => contacts[index].id);\n      setExistingChats(new Set(chatIds));\n    } catch (error) {\n      console.error('Error fetching all chats:', error);\n    }\n  };\n  const fetchAllUsers = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/messages/users'); // Assuming this endpoint returns all users\n      setAllUsers(response.data);\n    } catch (error) {\n      console.error('Error fetching all users:', error);\n    }\n  };\n  const fetchMessages = async contactId => {\n    try {\n      const response = await axios.get(`http://localhost:3001/messages/${userId}/${contactId}`);\n      setMessages(response.data);\n      if (response.data.length > 0) {\n        setExistingChats(prev => new Set(prev).add(contactId));\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!selectedContact || newMessage.trim() === '') return;\n    try {\n      await axios.post('http://localhost:3001/messages/send', {\n        senderId: userId,\n        receiverId: selectedContact.id,\n        message: newMessage\n      });\n      const newMessageObj = {\n        id: Date.now(),\n        // Generate a unique temporary ID (replace with actual ID from server if available)\n        senderId: userId,\n        receiverId: selectedContact.id,\n        message: newMessage\n      };\n      setMessages([...messages, newMessageObj]);\n      setNewMessage('');\n      setExistingChats(prev => new Set(prev).add(selectedContact.id));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const filteredContacts = contacts.filter(contact => existingChats.has(contact.id) && (contact.firstName.toLowerCase().includes(searchTerm.toLowerCase()) || contact.lastName.toLowerCase().includes(searchTerm.toLowerCase()) || contact.email.toLowerCase().includes(searchTerm.toLowerCase())));\n  const filteredUsers = allUsers.filter(user => user.firstName.toLowerCase().includes(searchTerm.toLowerCase()) || user.lastName.toLowerCase().includes(searchTerm.toLowerCase()) || user.email.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search contacts...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-search-results\",\n        children: filteredUsers.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-item ${selectedContact && selectedContact.id === user.id ? 'selected' : ''}`,\n          onClick: () => setSelectedContact(user),\n          children: [user.firstName, \" \", user.lastName]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-chats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Existing Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), filteredContacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-item ${selectedContact && selectedContact.id === contact.id ? 'selected' : ''}`,\n          onClick: () => setSelectedContact(contact),\n          children: [contact.firstName, \" \", contact.lastName]\n        }, contact.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: selectedContact ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.senderId === userId ? 'sent' : 'received'}`,\n            children: msg.message\n          }, msg.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-chat-selected\",\n        children: \"Select a contact to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(Messages, \"FMPRekrhNPMBeQB1Mc4uf5EMVcA=\");\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Messages","userId","contacts","selectedContact","setSelectedContact","_s","messages","setMessages","newMessage","setNewMessage","searchTerm","setSearchTerm","existingChats","setExistingChats","Set","allUsers","setAllUsers","fetchAllChats","fetchAllUsers","fetchMessages","id","chatPromises","map","contact","get","responses","Promise","all","chatIds","filter","response","data","length","index","error","console","contactId","prev","add","handleSendMessage","trim","post","senderId","receiverId","message","newMessageObj","Date","now","filteredContacts","has","firstName","toLowerCase","includes","lastName","email","filteredUsers","user","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","msg","_c","$RefreshReg$"],"sources":["/Users/nikitamarwah/Orbital24/artistically/client/src/components/Messages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Messages.css'; // Import CSS file for styling\n\nconst Messages = ({ userId, contacts, selectedContact, setSelectedContact }) => {\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [existingChats, setExistingChats] = useState(new Set());\n    const [allUsers, setAllUsers] = useState([]);\n\n    useEffect(() => {\n        // Fetch existing chats for all contacts on component mount\n        fetchAllChats();\n        // Fetch all users for search functionality\n        fetchAllUsers();\n    }, []);\n\n    useEffect(() => {\n        if (selectedContact) {\n            fetchMessages(selectedContact.id);\n        }\n    }, [selectedContact]);\n\n    const fetchAllChats = async () => {\n        try {\n            const chatPromises = contacts.map(contact =>\n                axios.get(`http://localhost:3001/messages/${userId}/${contact.id}`)\n            );\n            const responses = await Promise.all(chatPromises);\n            const chatIds = responses\n                .filter(response => response.data.length > 0)\n                .map((response, index) => contacts[index].id);\n            setExistingChats(new Set(chatIds));\n        } catch (error) {\n            console.error('Error fetching all chats:', error);\n        }\n    };\n\n    const fetchAllUsers = async () => {\n        try {\n            const response = await axios.get('http://localhost:3001/messages/users'); // Assuming this endpoint returns all users\n            setAllUsers(response.data);\n        } catch (error) {\n            console.error('Error fetching all users:', error);\n        }\n    };\n\n    const fetchMessages = async (contactId) => {\n        try {\n            const response = await axios.get(`http://localhost:3001/messages/${userId}/${contactId}`);\n            setMessages(response.data);\n            if (response.data.length > 0) {\n                setExistingChats(prev => new Set(prev).add(contactId));\n            }\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!selectedContact || newMessage.trim() === '') return;\n\n        try {\n            await axios.post('http://localhost:3001/messages/send', {\n                senderId: userId,\n                receiverId: selectedContact.id,\n                message: newMessage,\n            });\n            const newMessageObj = {\n                id: Date.now(), // Generate a unique temporary ID (replace with actual ID from server if available)\n                senderId: userId,\n                receiverId: selectedContact.id,\n                message: newMessage,\n            };\n            setMessages([...messages, newMessageObj]);\n            setNewMessage('');\n            setExistingChats(prev => new Set(prev).add(selectedContact.id));\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    const filteredContacts = contacts.filter(\n        contact =>\n            existingChats.has(contact.id) &&\n            (contact.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                contact.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                contact.email.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n\n    const filteredUsers = allUsers.filter(\n        user =>\n        (user.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            user.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            user.email.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n\n    return (\n        <div className=\"messages-container\">\n            <div className=\"chat-list\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Search contacts...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <div className=\"user-search-results\">\n                    {filteredUsers.map(user => (\n                        <div\n                            key={user.id}\n                            className={`chat-item ${selectedContact && selectedContact.id === user.id ? 'selected' : ''}`}\n                            onClick={() => setSelectedContact(user)}\n                        >\n                            {user.firstName} {user.lastName}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"existing-chats\">\n                    <h3>Existing Chats</h3>\n                    {filteredContacts.map((contact) => (\n                        <div\n                            key={contact.id}\n                            className={`chat-item ${selectedContact && selectedContact.id === contact.id ? 'selected' : ''}`}\n                            onClick={() => setSelectedContact(contact)}\n                        >\n                            {contact.firstName} {contact.lastName}\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className=\"chat-messages\">\n                {selectedContact ? (\n                    <>\n                        <div className=\"messages\">\n                            {messages.map((msg) => (\n                                <div key={msg.id} className={`message ${msg.senderId === userId ? 'sent' : 'received'}`}>\n                                    {msg.message}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"message-input\">\n                            <input\n                                type=\"text\"\n                                value={newMessage}\n                                onChange={(e) => setNewMessage(e.target.value)}\n                                placeholder=\"Type your message...\"\n                            />\n                            <button onClick={handleSendMessage}>Send</button>\n                        </div>\n                    </>\n                ) : (\n                    <div className=\"no-chat-selected\">Select a contact to start messaging</div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Messages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}