{"ast":null,"code":"var _jsxFileName = \"/Users/nikitamarwah/Orbital24/artistically/client/src/components/Messages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Messages.css'; // Import CSS file for styling\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Messages = ({\n  userId,\n  contacts,\n  selectedContact,\n  setSelectedContact\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    if (selectedContact) {\n      fetchMessages(selectedContact.id);\n    }\n  }, [selectedContact]);\n  const fetchMessages = async contactId => {\n    try {\n      const response = await axios.get(`http://localhost:3001/messages/${userId}/${contactId}`);\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!selectedContact || newMessage.trim() === '') return;\n    try {\n      await axios.post('http://localhost:3001/messages/send', {\n        senderId: userId,\n        receiverId: selectedContact.id,\n        message: newMessage\n      });\n      const newMessageObj = {\n        id: Date.now(),\n        // Generate a unique temporary ID (replace with actual ID from server if available)\n        senderId: userId,\n        receiverId: selectedContact.id,\n        message: newMessage\n      };\n      setMessages([...messages, newMessageObj]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleSearch = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3001/messages/${userId}?searchTerm=${searchTerm}`);\n      setSearchResults(response.data);\n    } catch (error) {\n      console.error('Error searching users:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search users...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), searchResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: searchResults.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setSelectedContact(user),\n          className: `chat-item ${selectedContact && selectedContact.id === user.id ? 'selected' : ''}`,\n          children: [user.firstName, \" \", user.lastName]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this) : contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-item ${selectedContact && selectedContact.id === contact.id ? 'selected' : ''}`,\n        onClick: () => setSelectedContact(contact),\n        children: [contact.firstName, \" \", contact.lastName]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: selectedContact ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.senderId === userId ? 'sent' : 'received'}`,\n            children: msg.message\n          }, msg.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-chat-selected\",\n        children: \"Select a contact to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Messages, \"P9tqtDjfY5zI+KTA7cfCkl766vU=\");\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Messages","userId","contacts","selectedContact","setSelectedContact","_s","messages","setMessages","newMessage","setNewMessage","searchTerm","setSearchTerm","searchResults","setSearchResults","fetchMessages","id","contactId","response","get","data","error","console","handleSendMessage","trim","post","senderId","receiverId","message","newMessageObj","Date","now","handleSearch","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","user","firstName","lastName","contact","msg","_c","$RefreshReg$"],"sources":["/Users/nikitamarwah/Orbital24/artistically/client/src/components/Messages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Messages.css'; // Import CSS file for styling\n\nconst Messages = ({ userId, contacts, selectedContact, setSelectedContact }) => {\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n\n    useEffect(() => {\n        if (selectedContact) {\n            fetchMessages(selectedContact.id);\n        }\n    }, [selectedContact]);\n\n    const fetchMessages = async (contactId) => {\n        try {\n            const response = await axios.get(`http://localhost:3001/messages/${userId}/${contactId}`);\n            setMessages(response.data);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!selectedContact || newMessage.trim() === '') return;\n\n        try {\n            await axios.post('http://localhost:3001/messages/send', {\n                senderId: userId,\n                receiverId: selectedContact.id,\n                message: newMessage,\n            });\n            const newMessageObj = {\n                id: Date.now(), // Generate a unique temporary ID (replace with actual ID from server if available)\n                senderId: userId,\n                receiverId: selectedContact.id,\n                message: newMessage,\n            };\n            setMessages([...messages, newMessageObj]);\n            setNewMessage('');\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    const handleSearch = async () => {\n        try {\n            const response = await axios.get(`http://localhost:3001/messages/${userId}?searchTerm=${searchTerm}`);\n            setSearchResults(response.data);\n        } catch (error) {\n            console.error('Error searching users:', error);\n        }\n    };\n\n    return (\n        <div className=\"messages-container\">\n            <div className=\"chat-list\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Search users...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <button onClick={handleSearch}>Search</button>\n                {searchResults.length > 0 ? (\n                    <div>\n                        {searchResults.map((user) => (\n                            <div\n                                key={user.id}\n                                onClick={() => setSelectedContact(user)}\n                                className={`chat-item ${selectedContact && selectedContact.id === user.id ? 'selected' : ''}`}\n                            >\n                                {user.firstName} {user.lastName}\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    contacts.map((contact) => (\n                        <div\n                            key={contact.id}\n                            className={`chat-item ${selectedContact && selectedContact.id === contact.id ? 'selected' : ''}`}\n                            onClick={() => setSelectedContact(contact)}\n                        >\n                            {contact.firstName} {contact.lastName}\n                        </div>\n                    ))\n                )}\n            </div>\n            <div className=\"chat-messages\">\n                {selectedContact ? (\n                    <>\n                        <div className=\"messages\">\n                            {messages.map((msg) => (\n                                <div key={msg.id} className={`message ${msg.senderId === userId ? 'sent' : 'received'}`}>\n                                    {msg.message}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"message-input\">\n                            <input\n                                type=\"text\"\n                                value={newMessage}\n                                onChange={(e) => setNewMessage(e.target.value)}\n                                placeholder=\"Type your message...\"\n                            />\n                            <button onClick={handleSendMessage}>Send</button>\n                        </div>\n                    </>\n                ) : (\n                    <div className=\"no-chat-selected\">Select a contact to start messaging</div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Messages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}