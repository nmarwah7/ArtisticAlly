{"ast":null,"code":"// messageController.js\n\nconst mysql = require('mysql');\n\n// MySQL connection configuration\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'test',\n  database: 'artistically'\n});\n\n// Connect to MySQL\nconnection.connect(err => {\n  if (err) {\n    console.error('Error connecting to database:', err);\n    return;\n  }\n  console.log('Connected to MySQL database');\n});\n\n// Send a message\nconst sendMessage = (req, res) => {\n  const {\n    senderId,\n    receiverId,\n    message\n  } = req.body;\n  const insertMessageQuery = 'INSERT INTO messages (sender_id, receiver_id, message, timestamp) VALUES (?, ?, ?, NOW())';\n  connection.query(insertMessageQuery, [senderId, receiverId, message], (err, results) => {\n    if (err) {\n      console.error('Error sending message:', err);\n      return res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n    return res.status(201).json({\n      message: 'Message sent successfully'\n    });\n  });\n};\n\n// Retrieve messages between two users\nconst getMessages = (req, res) => {\n  const {\n    userId,\n    contactId\n  } = req.params;\n  const getMessagesQuery = 'SELECT * FROM messages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) ORDER BY timestamp';\n  connection.query(getMessagesQuery, [userId, contactId, contactId, userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching messages:', err);\n      return res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n    return res.status(200).json(results);\n  });\n};\n\n// Find contact ID by email\nconst getContactId = (req, res) => {\n  const {\n    contactEmail\n  } = req.params;\n  if (!contactEmail) {\n    return res.status(400).json({\n      error: 'Email is required'\n    });\n  }\n  const query = 'SELECT id FROM users WHERE email = ?';\n  connection.query(query, [contactEmail], (err, results) => {\n    if (err) {\n      console.error('Error fetching user ID:', err);\n      return res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n    if (results.length === 0) {\n      return res.status(404).json({\n        error: 'User not found'\n      });\n    }\n    res.json({\n      id: results[0].id\n    });\n  });\n};\nmodule.exports = {\n  sendMessage,\n  getMessages,\n  getContactId\n};","map":{"version":3,"names":["mysql","require","connection","createConnection","host","user","password","database","connect","err","console","error","log","sendMessage","req","res","senderId","receiverId","message","body","insertMessageQuery","query","results","status","json","getMessages","userId","contactId","params","getMessagesQuery","getContactId","contactEmail","length","id","module","exports"],"sources":["/Users/nikitamarwah/Orbital24/artistically/client/src/components/Messages.js"],"sourcesContent":["// messageController.js\n\nconst mysql = require('mysql');\n\n// MySQL connection configuration\nconst connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: 'test',\n    database: 'artistically'\n});\n\n// Connect to MySQL\nconnection.connect((err) => {\n    if (err) {\n        console.error('Error connecting to database:', err);\n        return;\n    }\n    console.log('Connected to MySQL database');\n});\n\n// Send a message\nconst sendMessage = (req, res) => {\n    const { senderId, receiverId, message } = req.body;\n\n    const insertMessageQuery = 'INSERT INTO messages (sender_id, receiver_id, message, timestamp) VALUES (?, ?, ?, NOW())';\n    connection.query(insertMessageQuery, [senderId, receiverId, message], (err, results) => {\n        if (err) {\n            console.error('Error sending message:', err);\n            return res.status(500).json({ error: 'Internal server error' });\n        }\n\n        return res.status(201).json({ message: 'Message sent successfully' });\n    });\n};\n\n// Retrieve messages between two users\nconst getMessages = (req, res) => {\n    const { userId, contactId } = req.params;\n\n    const getMessagesQuery = 'SELECT * FROM messages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) ORDER BY timestamp';\n    connection.query(getMessagesQuery, [userId, contactId, contactId, userId], (err, results) => {\n        if (err) {\n            console.error('Error fetching messages:', err);\n            return res.status(500).json({ error: 'Internal server error' });\n        }\n\n        return res.status(200).json(results);\n    });\n};\n\n// Find contact ID by email\nconst getContactId = (req, res) => {\n    const { contactEmail } = req.params;\n\n    if (!contactEmail) {\n        return res.status(400).json({ error: 'Email is required' });\n    }\n\n    const query = 'SELECT id FROM users WHERE email = ?';\n    connection.query(query, [contactEmail], (err, results) => {\n        if (err) {\n            console.error('Error fetching user ID:', err);\n            return res.status(500).json({ error: 'Internal server error' });\n        }\n\n        if (results.length === 0) {\n            return res.status(404).json({ error: 'User not found' });\n        }\n\n        res.json({ id: results[0].id });\n    });\n};\n\nmodule.exports = {\n    sendMessage,\n    getMessages,\n    getContactId\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}